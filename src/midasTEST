void avgRecentTimestamps(const CBlockIndex* pindexLast, int64_t *avgOf5, int64_t *avgOf7, int64_t *avgOf9, int64_t *avgOf17, const Consensus::Params& params)
{
  int blockoffset = 0;
  int64_t oldblocktime;
  int64_t blocktime;
  

  *avgOf5 = *avgOf7 = *avgOf9 = *avgOf17 = 0;
  if (pindexLast)
    blocktime = pindexLast->GetBlockTime();
  else blocktime = 0;

  for (blockoffset = 0; blockoffset < 17; blockoffset++)
  {
    oldblocktime = blocktime;
    if (pindexLast)
    {
      pindexLast = pindexLast->pprev;
      blocktime = pindexLast->GetBlockTime();
    }
    else
    { // genesis block or previous
    blocktime -= params.nPowTargetSpacing;
    }
    // for each block, add interval.
    if (blockoffset < 5) *avgOf5 += (oldblocktime - blocktime);
    if (blockoffset < 7) *avgOf7 += (oldblocktime - blocktime);
    if (blockoffset < 9) *avgOf9 += (oldblocktime - blocktime);
    *avgOf17 += (oldblocktime - blocktime);    
  }
  // now we have the sums of the block intervals. Division gets us the averages. 
  *avgOf5 /= 5;
  *avgOf7 /= 7;
  *avgOf9 /= 9;
  *avgOf17 /= 17;
return 0;
}


unsigned int GetNextWorkRequiredMidas(const CBlockIndex *pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)
{

    int64_t avgOf5;
    int64_t avgOf9;
    int64_t avgOf7;
    int64_t avgOf17;
    int64_t toofast;
    int64_t tooslow;
    int64_t difficultyfactor = 10000;
    int64_t now;
    int64_t reg;
    int64_t BlockHeightTime;

    int64_t nFastInterval = (params.nPowTargetSpacing * 9 ) / 10; // seconds per block desired when far behind schedule
    int64_t nSlowInterval = (params.nPowTargetSpacing * 11) / 10; // seconds per block desired when far ahead of schedule
    int64_t nIntervalDesired;

    unsigned int nProofOfWorkLimit = UintToArith256(params.powLimit).GetCompact();

    if (pindexLast == NULL)
        // Genesis Block
        return nProofOfWorkLimit;

    
    if (params.fPowAllowMinDifficultyBlocks)
    {
        // Special difficulty rule for testnet: If the new block's timestamp is more than 2* TargetSpacing then allow
        // mining of a min-difficulty block.
        if (pblock->GetBlockTime() > pindexLast->GetBlockTime() + params.nPowTargetSpacing * 2)
           return nProofOfWorkLimit;
        else
        {
            // Return the last non-special-min-difficulty-rules-block
           const CBlockIndex* pindex = pindexLast;
           while (pindex->pprev && pindex->nHeight % nIntervalDesired != 0 && pindex->nBits == nProofOfWorkLimit)
               pindex = pindex->pprev;
           return pindex->nBits;
        }
    }

    // Regulate block times so as to remain synchronized in the long run with the actual time.  The first step is to
    // calculate what interval we want to use as our regulatory goal.  It depends on how far ahead of (or behind)
    // schedule we are.  If we're more than an adjustment period ahead or behind, we use the maximum (nSlowInterval) or minimum
    // (nFastInterval) values; otherwise we calculate a weighted average somewhere in between them.  The closer we are
    // to being exactly on schedule the closer our selected interval will be to our nominal interval (TargetSpacing).

    now = pindexLast->GetBlockTime();
    BlockHeightTime = Params().GenesisBlock().GetBlockTime() + pindexLast->nHeight * params.nPowTargetSpacing;
    
    if (now < BlockHeightTime + params.DifficultyAdjustmentInterval() && now > BlockHeightTime )
    // ahead of schedule by less than one interval.
    nIntervalDesired = ((params.DifficultyAdjustmentInterval() - (now - BlockHeightTime)) * params.nPowTargetSpacing +  
                (now - BlockHeightTime) * nFastInterval) / params.DifficultyAdjustmentInterval();
    else if (now + params.DifficultyAdjustmentInterval() > BlockHeightTime && now < BlockHeightTime)
    // behind schedule by less than one interval.
    nIntervalDesired = ((params.DifficultyAdjustmentInterval() - (BlockHeightTime - now)) * params.nPowTargetSpacing + 
                (BlockHeightTime - now) * nSlowInterval) / params.DifficultyAdjustmentInterval();

    // ahead by more than one interval;
    else if (now < BlockHeightTime) nIntervalDesired = nSlowInterval;
    
    // behind by more than an interval. 
    else  nIntervalDesired = nFastInterval;
    
    // find out what average intervals over last 5, 7, 9, and 17 blocks have been. 
    avgRecentTimestamps(pindexLast, &avgOf5, &avgOf7, &avgOf9, &avgOf17, params);    

    // check for emergency adjustments. These are to bring the diff up or down FAST when a burst miner or multipool
    // jumps on or off.  Once they kick in they can adjust difficulty very rapidly, and they can kick in very rapidly
    // after massive hash power jumps on or off.
    
    toofast = (nIntervalDesired * 2) / 3;
    tooslow = (nIntervalDesired * 3) / 2;

    // The "magic" of multiple intervals is that we take the least adjustment that any interval proves necessary.  If 
    // there is a real emergency - a massive change in hashing power - then all the intervals will quickly reflect 
    // a large difference, and massive adjustments will start being made.  But the minute we have made an 
    // adequate adjustment the shortest intervals will start to reflect parity and large adjustments will stop
    // being made.  Meanwhile, random fluctuations in block timing can occasionally provoke adjustments
    // in difficulty but unless longer intervals are significantly out of line they'll be tiny adjustments.

    if (avgOf5 < toofast && avgOf7 < toofast && avgOf9 < toofast && avgOf17 < nIntervalDesired)
    {  //emergency adjustment, slow down
      LogPrintf("GetNextWorkRequired EMERGENCY DIFFICULTY INCREASE\n");
      reg = avgOf5 > avgOf7 && avgOf5 > avgOf9 ? avgOf5 : 
            avgOf7 > avgOf9 ? avgOf7 : avgOf9;
      difficultyfactor *= 4 * toofast;
      difficultyfactor /= (reg + 3 * toofast);
    }
    else if (avgOf5 > tooslow && avgOf7 > tooslow && avgOf9 > tooslow && avgOf9 > nIntervalDesired)
    {  //emergency adjustment, speed up
      LogPrintf("GetNextWorkRequired EMERGENCY DIFFICULTY REDUCTION\n");
      reg = avgOf5 < avgOf7 && avgOf5 < avgOf9 ? avgOf5 :
            avgOf7 < avgOf9 ? avgOf7 : avgOf9;
      difficultyfactor *= 4 * tooslow;
      difficultyfactor /= reg + 3 * tooslow;
    }

    // check for normal adjustment. This is in addition to emergency adjustment.
    if (avgOf5 > nIntervalDesired && avgOf7 > nIntervalDesired && avgOf9 > nIntervalDesired && avgOf17 > nIntervalDesired)
    {
      LogPrintf("GetNextWorkRequired DIFFICULTY REDUCTION");
      reg = avgOf5 < avgOf7 && avgOf5 < avgOf9 && avgOf5 < avgOf17 ? avgOf5 :
            avgOf7 < avgOf9 && avgOf7 < avgOf17 ? avgOf7 :
            avgOf9 < avgOf17 ? avgOf9 : avgOf17 ;
      difficultyfactor *= 4 * nIntervalDesired;
      difficultyfactor *= (reg + 3 * nIntervalDesired);
    }

    else if (avgOf5 < nIntervalDesired && avgOf7 < nIntervalDesired && avgOf9 < nIntervalDesired && avgOf17 < nIntervalDesired)
    {
      LogPrintf("GetNextWorkRequired DIFFICULTY INCREASE\n");
      reg = avgOf5 > avgOf7 && avgOf5 > avgOf9 && avgOf5 > avgOf17 ? avgOf5 :
            avgOf7 > avgOf9 && avgOf7 > avgOf17 ? avgOf7 :
            avgOf9 > avgOf17 ? avgOf9 : avgOf17;
      difficultyfactor *= (4 * nIntervalDesired);
      difficultyfactor /= (reg + 3 * nIntervalDesired);
    }

    // limit to doubling or halving.
    if (difficultyfactor > 20000) difficultyfactor = 20000;
    if (difficultyfactor < 5000) difficultyfactor = 5000;

    arith_uint256 bnNew;
    arith_uint256 bnOld;

    bnOld.SetCompact(pindexLast->nBits);

    if (difficultyfactor == 10000) // no adjustment. 
      return(bnOld.GetCompact());

    bnNew = bnOld / difficultyfactor;
    bnNew *= 10000;
const arith_uint256 bnPowLimit = UintToArith256(params.powLimit);
if (bnNew > bnPowLimit)
        bnNew = bnPowLimit;


    LogPrintf("Actual time %d, Scheduled time for this block height = %d\n", now, BlockHeightTime );
    LogPrintf("Nominal block interval = %d, regulating on interval %d to get back to schedule.\n", 
          params.nPowTargetSpacing, nIntervalDesired );
    LogPrintf("Intervals of last 5/7/9/17 blocks = %d / %d / %d / %d.\n",
          avgOf5, avgOf7, avgOf9, avgOf17);
    LogPrintf("Difficulty Before Adjustment: %08x  %s\n", pindexLast->nBits, bnOld.ToString());
    LogPrintf("Difficulty After Adjustment:  %08x  %s\n", bnNew.GetCompact(), bnNew.ToString());

    return bnNew.GetCompact();
}